#!/usr/bin/env php
<?php

class Leads
{
    private $datafile = 'leads.json';

    public function __construct()
    {
        if (file_exists($this->datafile) == false) {
            $data = (object) array(
                'updated_at' => time(),
                'items' => array()
            );
            $this->setData($data);
        }
    }

    public function isEmpty()
    {
        $data = $this->getData();
        if (empty($data->items)) {
            return true;
        } else {
            return false;
        }
    }

    public function isDuplicate($email)
    {
        $data = $this->getData();
        foreach ($data->items as $lead) {
            if ($lead->email == $email) {
                return true;
            }
        }
        return false;
    }

    private function getData()
    {
        $json = file_get_contents($this->datafile);
        return json_decode($json);
    }

    private function setData($data)
    {
        $data->updated_at = time();
        $json = json_encode($data);
        file_put_contents($this->datafile, $json);
    }

    public function list()
    {
        if ($this->isEmpty() !== true) {
            $data = $this->getData();
            foreach ($data->items as $key => $lead) {
                $id = $key + 1;
                $firstname = $lead->firstname;
                $lastname = $lead->lastname;
                $email = $lead->email;
                $phone1 = $lead->phone1;
                $phone2 = $lead->phone2;
                $comment = $lead->comment;
                echo "$id. $firstname $lastname $email $phone1 $phone2 $comment\n";
            }
        } else {
            echo 'Lead registry is empty.'.PHP_EOL;
        }
    }

    public function new($firstname, $lastname, $email, $phone1, $phone2, $comment)
    {
        if ($this->isDuplicate($email) !== true) {
            $data = $this->getData();
            array_push($data->items, array(
                'firstname' => $firstname,
                'lastname' => $lastname,
                'email' => $email,
                'phone1' => $phone1,
                'phone2' => $phone2,
                'comment' => $comment
            ));
            $this->setData($data);
            echo 'New lead was added successfully!'.PHP_EOL;
        } else {
            echo 'ERROR: Duplicate entry. Lead with this email already exists in the lead registry.'.PHP_EOL;
        }
    }

    public function delete($id)
    {
        if ($this->isEmpty() !== true) {
            $data = $this->getData();
            $i = $id - 1;
            if (isset($data->items[$i])) {
                $firstname = $data->items[$i]->firstname;
                $lastname = $data->items[$i]->lastname;
                $email = $data->items[$i]->email;
                unset($data->items[$i]);
                $array = array_values($data->items);
                $data->items = $array;
                $this->setData($data);
                echo "Succesfully deleted lead with id $id - $firstname $lastname $email.\n";
            } else {
                echo 'Lead id is not in lead registry.'.PHP_EOL;
            }
        } else {
            echo 'Nothing to delete, lead registry is empty.'.PHP_EOL;
        }
    }

    public function find($query)
    {
        if ($this->isEmpty() !== true) {
            $data = $this->getData();
            $exists = false;
            foreach ($data->items as $key => $lead) {
                if (strpos($lead->firstname, $query) !== false || strpos($lead->lastname, $query) !== false || strpos($lead->email, $query) !== false) {
                    $id = $key + 1;
                    $firstname = $lead->firstname;
                    $lastname = $lead->lastname;
                    $email = $lead->email;
                    $phone1 = $lead->phone1;
                    $phone2 = $lead->phone2;
                    $comment = $lead->comment;
                    echo "$id. $firstname $lastname $email $phone1 $phone2 $comment\n";
                    $exists = true;
                }
            }
            if ($exists == false) {
                echo 'No leads found matching the search query.'.PHP_EOL;
            }
        } else {
            echo 'Nothing to find, lead registry is empty.'.PHP_EOL;
        }
    }

    public function import($file)
    {
        $data = $this->getData();
        if (file_exists($file)) {
            $handle = fopen($file, 'r');
            $count = 0;
            while (($csv_data = fgetcsv($handle, 1000)) !== false) {
                if ($this->isDuplicate($csv_data[2]) !== true) {
                    array_push($data->items, array(
                        'firstname' => $csv_data[0],
                        'lastname' => $csv_data[1],
                        'email' => $csv_data[2],
                        'phone1' => $csv_data[3],
                        'phone2' => $csv_data[4],
                        'comment' => $csv_data[5]
                    ));
                    $count++;
                } else {
                    echo 'ERROR: Duplicate entry. Lead with email '.$csv_data[2].' already exists in the lead registry.'.PHP_EOL;
                }
            }
            $this->setData($data);
            echo 'Succesfully imported '.$count.' leads.'.PHP_EOL;
        } else {
            echo 'Specified file doesn\'t exist.'.PHP_EOL;
        }
    }
}

## Check args
if (count($argv) > 1) {
    $leads = new Leads;
    if ($argv[1] == 'list') {
        $leads->list();
    } elseif ($argv[1] == 'new') {
        if (isset($argv[2]) && isset($argv[3]) && isset($argv[4]) && isset($argv[5]) && isset($argv[6]) && isset($argv[7])) {
            $leads->new($argv[2], $argv[3], $argv[4], $argv[5], $argv[6], $argv[7]);
        } else {
            echo 'Too few arguments, usage: \'aerolead new [firstname] [lastname] [email] [phone1] [phone2] [\'comment\']\''.PHP_EOL;
        }
    } elseif ($argv[1] == 'delete') {
        if (isset($argv[2])) {
            $leads->delete($argv[2]);
        } else {
            echo 'Too few arguments, usage: \'aerolead delete [id]\''.PHP_EOL;
        }
    } elseif ($argv[1] == 'find') {
        if (isset($argv[2])) {
            $leads->find($argv[2]);
        } else {
            echo 'Too few arguments, usage: \'aerolead find [pattern]\''.PHP_EOL;
        }
    } elseif ($argv[1] == 'import') {
        if (isset($argv[2])) {
            $leads->import($argv[2]);
        } else {
            echo 'Too few arguments, usage: \'aerolead import [filename]\''.PHP_EOL;
        }
    } elseif ($argv[1] == 'help') {
        echo "This is Aero lead registration tool.\n\nAvailable commands:\n\nlist - List all registered leads. Displayed in order: firstname, lastname, email, phone1, phone2, comment.\nnew [firstname] [lastname] [email] [phone1] [phone2] ['comment'] - Add new lead. Use single quotes around comment when using more than one word.\ndelete [id] - Delete existing lead. Provided id should be of existing lead in the lead registry.\nfind [pattern] - Find leads which match the pattern. Looks for matches in firstname, lastname, email fields.\nimport [filename] - Import leads from csv file. Each row must have the following fields in this order: firstname, lastname, email, phone1, phone2, comment.\n";
    } else {
        echo 'ERROR: Unknown command. Use \'aerotime help\' to see the list of available commands.'.PHP_EOL;
    }
} else {
    echo "This is Aero lead registration tool.\n\nAvailable commands:\n\nlist - List all registered leads. Displayed in order: firstname, lastname, email, phone1, phone2, comment.\nnew [firstname] [lastname] [email] [phone1] [phone2] ['comment'] - Add new lead. Use single quotes around comment when using more than one word.\ndelete [id] - Delete existing lead. Provided id should be of existing lead in the lead registry.\nfind [pattern] - Find leads which match the pattern. Looks for matches in firstname, lastname, email fields.\nimport [filename] - Import leads from csv file. Each row must have the following fields in this order: firstname, lastname, email, phone1, phone2, comment.\n";
}

?>